using System.Collections;
using System.Collections.Generic;
using UnityEngine;
 

public class PlayerController : MonoBehaviour
{
    private Rigidbody2D rd;
    private float Hori; //Horizontal
    [SerializeField] private float speed,AtReach;
    private Vector2 ve = new Vector2(1, 0);
    private Vector2 ve1 = new Vector2(-1, 0);


    public Vector3 PositionGet { get; set; }

    public float HoriGet { get; private set; } = 1;

    
    [SerializeReference]private GameObject AttackgameObject;

    

     //junp
    private float JunpTimer;  //�W�����v�̌��݂̌p������
    private float JunpAfterTimer;
    private bool JunpTrigger;
    private bool JunpAfterTrigger;
    [SerializeField] float JunpTime;      //�W�����v�̌p������
    [SerializeField] float JunpAfterTime;
    [SerializeField] float JunpPawer;     //�W�����v�̑���
    [SerializeField] float JunpLastPawer;

    static int AttackD = 1;//player�̍U����

    private Animator anim = null;

    void Start()
    {
        anim = GetComponent<Animator>();
        rd = GetComponent<Rigidbody2D>();
        PositionGet = rd.position;
    }

    // Update is called once per frame
    void Update()
    {
        Hori = Input.GetAxisRaw("Horizontal");

        if (Hori != 0 && Hori != HoriGet) HoriGet = Hori;

        if (Input.GetMouseButtonDown(0))
            Attack();

        if (Input.GetKey(KeyCode.Space) == false && JunpTrigger == true) JunpAfterTrigger = true;
        if (Input.GetKey(KeyCode.Space)) JunpTrigger = true;
    }

    private void FixedUpdate()
    {
        

        PlayerMove();

        PositionGet = rd.position;

        if (JunpTrigger && JunpAfterTrigger == false && JunpTimer <= JunpTime) PlayerJunp();


    }

    private void PlayerMove()
    {
        if (Hori != 0)
        {
            //�ړ����͂�����Ƃ�
            rd.velocity = new Vector2(speed * Hori, rd.velocity.y);
            anim.SetBool("walk", true);
            if (Hori > 0)
                transform.rotation = new Quaternion(0.0f, 180.0f, 0.0f, 0.0f); //������ύX����
            else if(Hori<0)
                transform.rotation = new Quaternion(0.0f, 0.0f, 0.0f, 0.0f); //������ύX����

        }
        else
            anim.SetBool("walk", false);
    }

    private void Attack()
    {
        float AttackHori = 1;
        if (Hori == 0)
        {
            if (AttackHori >= 0)
                Instantiate(AttackgameObject, new Vector3(transform.position.x + AtReach, transform.position.y, 0.0f), Quaternion.identity);
            else if (AttackHori <= 0)
                Instantiate(AttackgameObject, new Vector3(transform.position.x + -AtReach, transform.position.y, 0.0f), Quaternion.identity);
            
        }
        else if (Hori >= 0)
        {
            Instantiate(AttackgameObject, new Vector3(transform.position.x + AtReach, transform.position.y, 0.0f), Quaternion.identity);
            AttackHori = 1;
        }
        else if (Hori <= 0) 
        {
            Instantiate(AttackgameObject, new Vector3(transform.position.x + -AtReach, transform.position.y, 0.0f), Quaternion.identity);
            AttackHori = -1;
        }
            
    }

    void PlayerJunp() //�v���C���[�̃W�����v
    {
        JunpTimer += Time.deltaTime;
        rd.velocity = new Vector3(rd.velocity.x, JunpPawer, 0);
        if (JunpAfterTrigger && JunpAfterTimer <= JunpAfterTime)
        {
            JunpAfterTimer += Time.deltaTime;
            new Vector3(rd.velocity.x, JunpLastPawer, 0);
        }
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (JunpTrigger) JunpTrigger = false;
        if (JunpAfterTrigger) JunpAfterTrigger = false;
        if (JunpTimer != 0) JunpTimer = 0;
        if (JunpAfterTimer != 0) JunpAfterTimer = 0;
    }

    public int PlayerD { get; set; } = AttackD;

}

